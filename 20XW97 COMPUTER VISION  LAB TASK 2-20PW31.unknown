# -*- coding: utf-8 -*-
"""cvlab7task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZW2-hE2XzunU6WkOQ0P8DVllk0X8zRqm

# Task 1 passing image through low pass filter
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt
import random
from sklearn.cluster import KMeans
import math

f=cv2.imread('cameraman.tif')
h=np.zeros([256,256])
f

M = 10
h1 = 1/100 * np.ones([M,M])
g = cv2.filter2D(f,-1,h1)
s= cv2.subtract(f,g)
plt.figure(1)
plt.imshow(f,cmap='gray')
plt.title('Input')
plt.figure(2)
plt.imshow(g,cmap='gray')
plt.title('output')
plt.figure(3)
plt.imshow(s,cmap='gray')
plt.title('difference')

"""# difference between original and blurred img, highlights the edge and details

# Task 2 -  noisy image pass through high pass filter
"""

def scramble(height,width,image,scramble_fraction=0.1):
  pix =  int(height * width * scramble_fraction)
  scrambled_image = image.copy()
  for x in range(pix):
      h, w = random.randint(0, height - 1), random.randint(0, width - 1)
      new_height = random.randint(0, height - 1)
      new_width = random.randint(0, width - 1)
      pixel_value = image[h, w]
      scrambled_image[new_height,new_width] = pixel_value
  return scrambled_image

h,w,c = f.shape
scrambled_image = scramble(h,w,f)

hpf = np.array([[0,-1,0],[-1,4,-1],[0,-1,0]])
gh = cv2.filter2D(scrambled_image,-1,hpf)
plt.figure(1)
plt.imshow(f,cmap='gray')
plt.title('Input')
plt.figure(2)
plt.imshow(scrambled_image,cmap='gray')
plt.title('scrambled')
plt.figure(3)
plt.imshow(gh,cmap='gray')
plt.title('output')

"""# Noisy img through HPF highlights details of edge in black background

# Task 3 Vector quantization
"""

r,l=2,2
f = np.array([[2,4,6,8],[10,11,16,15],[9,3,1,7],[12,14,13,5]])

flat = f.flatten()
g = flat.reshape(-1, 2)
print("\nGrouped elements row-wise in groups of 2 as of l:")
g=np.array(g)
print(g)

cv = 2**(r*l)
dr = f.max()-f.min()
inter = math.ceil(dr/(r*l))
print(inter)

centroid = {}
ir,ic=2,14
label_counter = 0
for i in range(0,16,inter):
  for j in range(4,17,inter):
    label = f'c{label_counter}'
    centroid[label] = [ir,ic]
    ir+=inter
    label_counter+=1
  ir=2
  ic-=inter
centroid

def find_closest_points(A1, A2):
  res = []
  for point in A1:
    distances = np.linalg.norm(A2 - point, axis=1)
    closest_index = np.argmin(distances)
    closest_point = A2[closest_index]
    res.append(closest_point)
  return np.array(res)

val = list(centroid.values())
val[::-1]

ans = find_closest_points(g,val[::-1])
ans

dictr = {tuple(v): k for k, v in centroid.items()}
for i in ans:
  a = dictr.get(tuple(i))
  print(a)

# reconstructed img
r = ans.flatten()
reconstruct = r.reshape(-1, inter)
print("\nGrouped elements row-wise in groups of 2 as of l:")
reconstruct=np.array(reconstruct)
print(reconstruct)

"""# Task 5 - resizing of input img"""

img = cv2.imread('cameraman.tif')
img

# resize to 256*256
img_256 = cv2.resize(img,(256,256))
img_256

# resize to 128*128
img_128 = cv2.resize(img,(128,128))
img_128

"""# Image become smaller and clean sharp image

# Task 6 - Avg and weighted avg filter
"""

f = np.zeros([8,8])
for i in range(8):
  for j in range(8):
    f[i,j] =abs(i-j)
plt.imshow(f, cmap='gray')
plt.title("8x8 Image with f[m,n] = |m - n|")

# Avg filter
M=11
h=1/(M*M)*np.ones([M,M])
g=cv2.filter2D(f,-1,h)
plt.imshow(g, cmap='gray')
plt.title("Avg filter")

# Weighted Avg filter
h2=1/16*np.array([[1,2,1],[2,4,2],[1,2,1]])
g2=cv2.filter2D(f,-1,h2)
plt.imshow(g2, cmap='gray')
plt.title("Weighted Avg filter")

"""# weighted average and original image are similar

# Generate the 16  x 16 image
"""

def ring_matrix(size):
  layers = size // 2 + 1
  ring_matrix = np.zeros((size, size),dtype=int)
  for i in range(layers):
    ring_matrix[i:size-i, i:size-i] = i
  return ring_matrix

img_16 = ring_matrix(16)
img_16

plt.imshow(img_16, cmap='gray')
plt.title("16x16 Image")